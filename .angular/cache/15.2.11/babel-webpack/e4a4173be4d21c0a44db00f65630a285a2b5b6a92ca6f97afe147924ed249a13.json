{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ProductService {\n  constructor() {\n    this.storageKey = 'products';\n    this.productToEdit = new BehaviorSubject(null);\n  }\n  // Obtener todos los productos \n  getProducts() {\n    const products = localStorage.getItem(this.storageKey);\n    return products ? JSON.parse(products) : [];\n  }\n  // Guardar un nuevo producto en LocalStorage\n  addProduct(product) {\n    const products = this.getProducts();\n    const id = new Date().getTime();\n    const newProduct = {\n      id,\n      ...product\n    };\n    products.push(newProduct);\n    localStorage.setItem(this.storageKey, JSON.stringify(products));\n  }\n  // Eliminar un producto por su ID\n  deleteProduct(id) {\n    let products = this.getProducts();\n    products = products.filter(product => product.id !== id);\n    localStorage.setItem(this.storageKey, JSON.stringify(products));\n  }\n  // Actualizar un producto existente\n  updateProduct(updatedProduct) {\n    const products = this.getProducts();\n    const index = products.findIndex(prod => prod.id === updatedProduct.id);\n    if (index !== -1) {\n      products[index] = updatedProduct;\n      localStorage.setItem('products', JSON.stringify(products));\n    }\n  }\n  setProductToEdit(product) {\n    this.productToEdit.next(product);\n  }\n  getProductToEdit() {\n    return this.productToEdit.asObservable();\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAItC,OAAM,MAAOC,cAAc;EAGzBC;IAFQ,eAAU,GAAG,UAAU;IACvB,kBAAa,GAAG,IAAIF,eAAe,CAAM,IAAI,CAAC;EACtC;EAEhB;EACAG,WAAW;IACT,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,UAAU,CAAC;IACtD,OAAOH,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC,GAAG,EAAE;EAC7C;EAEA;EACAM,UAAU,CAACC,OAAY;IACrB,MAAMP,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnC,MAAMS,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC/B,MAAMC,UAAU,GAAG;MAAEH,EAAE;MAAE,GAAGD;IAAO,CAAE;IACrCP,QAAQ,CAACY,IAAI,CAACD,UAAU,CAAC;IACzBV,YAAY,CAACY,OAAO,CAAC,IAAI,CAACV,UAAU,EAAEC,IAAI,CAACU,SAAS,CAACd,QAAQ,CAAC,CAAC;EACjE;EAEA;EACAe,aAAa,CAACP,EAAU;IACtB,IAAIR,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACjCC,QAAQ,GAAGA,QAAQ,CAACgB,MAAM,CAACT,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE,CAAC;IACxDP,YAAY,CAACY,OAAO,CAAC,IAAI,CAACV,UAAU,EAAEC,IAAI,CAACU,SAAS,CAACd,QAAQ,CAAC,CAAC;EACjE;EAEA;EACAiB,aAAa,CAACC,cAAmB;IAC/B,MAAMlB,QAAQ,GAAG,IAAI,CAACD,WAAW,EAAE;IACnC,MAAMoB,KAAK,GAAGnB,QAAQ,CAACoB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKU,cAAc,CAACV,EAAE,CAAC;IAEvE,IAAIW,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBnB,QAAQ,CAACmB,KAAK,CAAC,GAAGD,cAAc;MAChCjB,YAAY,CAACY,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACd,QAAQ,CAAC,CAAC;;EAE9D;EACAsB,gBAAgB,CAACf,OAAY;IAC3B,IAAI,CAACgB,aAAa,CAACC,IAAI,CAACjB,OAAO,CAAC;EAClC;EAEAkB,gBAAgB;IACd,OAAO,IAAI,CAACF,aAAa,CAACG,YAAY,EAAE;EAC1C;;;uBA3CW7B,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAA8B,SAAd9B,cAAc;MAAA+B,YAFb;IAAM;EAAA","names":["BehaviorSubject","ProductService","constructor","getProducts","products","localStorage","getItem","storageKey","JSON","parse","addProduct","product","id","Date","getTime","newProduct","push","setItem","stringify","deleteProduct","filter","updateProduct","updatedProduct","index","findIndex","prod","setProductToEdit","productToEdit","next","getProductToEdit","asObservable","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookair2020/Documents/PlanDeAprendizaje-main/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private storageKey = 'products';  \n  private productToEdit = new BehaviorSubject<any>(null);\n  constructor() { }\n\n  // Obtener todos los productos \n  getProducts(): any[] {\n    const products = localStorage.getItem(this.storageKey);\n    return products ? JSON.parse(products) : [];  \n  }\n\n  // Guardar un nuevo producto en LocalStorage\n  addProduct(product: any): void {\n    const products = this.getProducts();\n    const id = new Date().getTime();  \n    const newProduct = { id, ...product };\n    products.push(newProduct);\n    localStorage.setItem(this.storageKey, JSON.stringify(products));\n  }\n\n  // Eliminar un producto por su ID\n  deleteProduct(id: number): void {\n    let products = this.getProducts();\n    products = products.filter(product => product.id !== id);  \n    localStorage.setItem(this.storageKey, JSON.stringify(products));\n  }\n\n  // Actualizar un producto existente\n  updateProduct(updatedProduct: any): void {\n    const products = this.getProducts();\n    const index = products.findIndex(prod => prod.id === updatedProduct.id);\n  \n    if (index !== -1) {\n      products[index] = updatedProduct;\n      localStorage.setItem('products', JSON.stringify(products));\n    }\n  }\n  setProductToEdit(product: any): void {\n    this.productToEdit.next(product); \n  }\n  \n  getProductToEdit(): any {\n    return this.productToEdit.asObservable();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}